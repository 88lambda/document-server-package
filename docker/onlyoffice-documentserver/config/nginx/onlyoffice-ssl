## Normal HTTP host
server {
  listen 0.0.0.0:80;
  listen [::]:80 default_server;
  server_name _;
  server_tokens off;

  ## Redirects all traffic to the HTTPS host
  root /nowhere; ## root doesn't have to be a valid path since we are redirecting
  rewrite ^ https://$host$request_uri? permanent;
}

upstream doc_service {  
  server localhost:8000;
}

upstream spellchecker {  
  server localhost:8080;
}

upstream example {  
  server localhost:3000;
}

#HTTP host for internal services
server {
  listen 127.0.0.1:80;
  listen [::1]:80;
  server_name localhost;
  server_tokens off;
  
  client_max_body_size 100m;
  
  location / {
    proxy_pass http://doc_service;
 
    proxy_set_header Host $host;

    if ($http_x_forwarded_host = ''){
      set $http_x_forwarded_host $server_name;
    }
    if ($http_x_forwarded_proto = ''){
      set $http_x_forwarded_proto $scheme;
    }
    proxy_set_header X-Forwarded-Host $http_x_forwarded_host;
    proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
  }
}

## HTTPS host
server {
  listen 0.0.0.0:443 ssl spdy;
  listen [::]:443 ssl spdy default_server;
  server_tokens off;
  root /usr/share/nginx/html;

  ## Increase this if you want to upload large attachments
  client_max_body_size 100m;

  ## Strong SSL Security
  ## https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
  ssl on;
  ssl_certificate {{SSL_CERTIFICATE_PATH}};
  ssl_certificate_key {{SSL_KEY_PATH}};
  ssl_verify_client {{SSL_VERIFY_CLIENT}};
  ssl_client_certificate {{CA_CERTIFICATES_PATH}};

  ssl_ciphers "ECDHE-RSA-AES128-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA128:DHE-RSA-AES128-GCM-SHA384:DHE-RSA-AES128-GCM-SHA128:ECDHE-RSA-AES128-SHA384:ECDHE-RSA-AES128-SHA128:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA128:DHE-RSA-AES128-SHA128:DHE-RSA-AES128-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA384:AES128-GCM-SHA128:AES128-SHA128:AES128-SHA128:AES128-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

  ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
  ssl_session_cache  builtin:1000  shared:SSL:10m;

  ssl_prefer_server_ciphers   on;

  add_header Strict-Transport-Security max-age={{ONLYOFFICE_HTTPS_HSTS_MAXAGE}};
  # add_header X-Frame-Options SAMEORIGIN;
  add_header X-Content-Type-Options nosniff;

  ## [Optional] If your certficate has OCSP, enable OCSP stapling to reduce the overhead and latency of running SSL.
  ## Replace with your ssl_trusted_certificate. For more info see:
  ## - https://medium.com/devops-programming/4445f4862461
  ## - https://www.ruby-forum.com/topic/4419319
  ## - https://www.digitalocean.com/community/tutorials/how-to-configure-ocsp-stapling-on-apache-and-nginx
  # ssl_stapling on;
  # ssl_stapling_verify on;
  # ssl_trusted_certificate /etc/nginx/ssl/stapling.trusted.crt;
  # resolver 208.67.222.222 208.67.222.220 valid=300s; # Can change to your DNS resolver if desired
  # resolver_timeout 10s;

  ## [Optional] Generate a stronger DHE parameter:
  ##   cd /etc/ssl/certs
  ##   sudo openssl dhparam -out dhparam.pem 4096
  ##
  ssl_dhparam {{SSL_DHPARAM_PATH}};

  gzip on;
  gzip_vary on;
  gzip_types  text/plain
              text/xml
              text/css
              text/csv
              application/xml
              application/javascript
              application/x-javascript
              application/json
              application/octet-stream
              application/x-font-ttf
              application/pdf
              application/rtf
              application/msword
              application/vnd.ms-excel
              application/vnd.ms-powerpoint;
              #application/vnd.oasis.opendocument.text
              #application/vnd.oasis.opendocument.spreadsheet
              #application/vnd.oasis.opendocument.presentation
              #application/vnd.openxmlformats-officedocument.wordprocessingml.document
              #application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
              #application/vnd.openxmlformats-officedocument.presentationml.presentation;

  access_log off;
  error_log /var/log/onlyoffice/documentserver/nginx.error.log;

  if ($http_host){
    set $redirect_host $http_host;
  }
  
  if ($http_x_forwarded_host){
    set $redirect_host $http_x_forwarded_host;
  }
    
  if ($http_x_forwarded_proto){
    set $redirect_host $host;
    
    rewrite ^(\/OfficeWeb)(\/apps\/(?!api\/).*)$ $http_x_forwarded_proto://$redirect_host$1/{{DATE}}$2 redirect;
  }

  rewrite ^(\/OfficeWeb)(\/apps\/(?!api\/).*)$ $1/{{DATE}}$2 redirect;

  location ~ ^(\/OfficeWeb)(\/{{DATE}})?\/(apps|sdk|vendor)(?!\/Fonts\/)(\/.*)$ {
    expires 365d;
    alias /var/www/onlyoffice/documentserver$1/$3$4;
  }

  location ~ ^(\/OfficeWeb)\/{{DATE}}(\/sdk\/Fonts\/.*) {
    proxy_pass http://doc_service$1$2;
  }

  location ~ ^(\/cache\/files.*)(\/.*) {
    alias /var/lib/onlyoffice/documentserver/App_Data$1;
    add_header Content-Disposition 'attachment;';

    # set $secret_string onlyoffice;
    # secure_link $arg_md5,$arg_expires;
    # secure_link_md5 "$secure_link_expires$uri$secret_string";

    # if ($secure_link = "") {
    #   return 403;
    # }

    # if ($secure_link = "0") {
    #     return 410;
    # }
  }

  location / {
    rewrite ^/$ /example/ redirect;
    proxy_pass http://doc_service;

    proxy_set_header Host $host;

    if ($http_x_forwarded_host = ''){
      set $http_x_forwarded_host $server_name;
    }
    if ($http_x_forwarded_proto = ''){
      set $http_x_forwarded_proto $scheme;
    }
    proxy_set_header X-Forwarded-Host $http_x_forwarded_host;
    proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
  }

  location /doc/ {
    proxy_pass http://doc_service;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    proxy_set_header Host $host;

    if ($http_x_forwarded_host = ''){
      set $http_x_forwarded_host $server_name;
    }
    if ($http_x_forwarded_proto = ''){
      set $http_x_forwarded_proto $scheme;
    }
    proxy_set_header X-Forwarded-Host $http_x_forwarded_host;
    proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
  }

  # For debug purpose only
  # location /rabbitmq/ {
  #   proxy_pass http://localhost:15672/;
  # }

  location /spellchecker/ {
    proxy_pass http://spellchecker/;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

  location /example/ {
    proxy_pass http://example/;
    
    proxy_set_header Host $host/example;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

}
